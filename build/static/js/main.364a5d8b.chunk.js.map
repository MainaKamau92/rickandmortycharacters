{"version":3,"sources":["components/navbar.js","components/Character.js","components/Characters.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Character","props","src","image","alt","name","status","color","size","location","Characters","state","info","characters","pageNumbers","currentPage","numbers","num","numsArray","i","push","shift","handleClick","page","setState","axios","get","then","response","data","results","pages","this","console","log","map","character","key","id","species","gender","origin","aria-label","onClick","Component","Footer","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kNAYeA,G,MAVA,WACX,OACI,yBAAKC,UAAU,8BACb,0BAAMA,UAAU,uBAAhB,gC,gECwBKC,EA1BG,SAACC,GACf,OACI,yBAAKF,UAAU,QACX,yBAAKG,IAAKD,EAAME,MAAOJ,UAAU,eAAeK,IAAKH,EAAMI,OACvD,yBAAKN,UAAU,iBACX,wBAAIA,UAAU,+BAA+BE,EAAMI,OAE3D,yBAAKN,UAAU,OACX,wBAAIA,UAAU,+BACN,wBAAIA,UAAU,yBACd,wBAAIA,UAAU,wBAAd,SAGyB,UAAjBE,EAAMK,OAAqB,kBAAC,IAAD,CAAmBC,MAAM,OAAOR,UAAU,OAAOS,KAAM,KAC9E,kBAAC,IAAD,CAAmBT,UAAU,OAAOQ,MAAM,MAAMC,KAAM,MAGlE,wBAAIT,UAAU,wBACTE,EAAMQ,SAASJ,KAChB,kBAAC,IAAD,CAAQE,MAAM,QAAQC,KAAM,GAAIT,UAAU,cCmEvDW,E,4MAlFXC,MAAQ,CACJC,KAAM,GACNC,WAAY,GACZC,YAAa,GACbC,YAAa,G,EAGjBC,QAAU,SAACC,GAEP,IADA,IAAMC,EAAY,GACTC,EAAI,EAAGA,EAAIF,EAAKE,IACrBD,EAAUE,KAAKD,GAGnB,OADAD,EAAUG,QACHH,G,EAkBXI,YAAc,SAACC,GACX,EAAKC,SAAS,CACVT,YAAaQ,IAEjBE,IAAMC,IAAN,0DAA6DH,IACxDI,MACG,SAACC,GACG,EAAKJ,SAAS,CACVX,WAAYe,EAASC,KAAKC,c,kEAvBzB,IAAD,OAChBL,IAAMC,IAAN,8CACKC,MACG,SAACC,GACG,EAAKJ,SAAS,CACVX,WAAYe,EAASC,KAAKC,QAC1BlB,KAAMgB,EAASC,KAAKjB,KACpBE,YAAa,EAAKE,QAAQY,EAASC,KAAKjB,KAAKmB,c,+BAsBvD,IAAD,SAC0CC,KAAKrB,MAA7CE,EADF,EACEA,WAAYC,EADd,EACcA,YAAaC,EAD3B,EAC2BA,YAEhC,OADAkB,QAAQC,IAAIF,KAAKrB,OAEb,yBAAKZ,UAAU,aACX,yBAAKA,UAAU,oBAEPc,EAAaA,EAAWsB,KAAI,SAAAC,GAAS,OACjC,kBAAC,EAAD,CACIC,IAAKD,EAAUE,GACfjC,KAAM+B,EAAU/B,KAChBC,OAAQ8B,EAAU9B,OAClBiC,QAASH,EAAUG,QACnBC,OAAQJ,EAAUI,OAClBC,OAAQL,EAAUK,OAClBhC,SAAU2B,EAAU3B,SACpBN,MAAOiC,EAAUjC,WACf,MAGlB,yBAAKuC,aAAW,0BAA0B3C,UAAU,aAChD,wBAAIA,UAAU,cAENe,EAAYqB,KAAI,SAACZ,GAAD,OAAU,wBACtBxB,UAAS,oBAAegB,IAAgBQ,EAAO,SAAW,MAAQc,IAAKd,EACvEoB,QAAS,kBAAM,EAAKrB,YAAYC,KAAO,0BACvCxB,UAAU,aAAawB,c,GAzE9BqB,aCOVC,EAVA,WACX,OACI,yBAAK9C,UAAU,mCACb,0BAAMA,UAAU,uBAAhB,iBCUK+C,MAVf,WACE,OACE,yBAAK/C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcgD,QACW,cAA7BC,OAAOvC,SAASwC,UAEe,UAA7BD,OAAOvC,SAASwC,UAEhBD,OAAOvC,SAASwC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.364a5d8b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = () => {\n    return (\n        <nav className=\"navbar navbar-dark bg-dark\">\n          <span className=\"navbar-text mx-auto\">\n            Rick and Morty Characters\n          </span>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport {ExclamationCircle, GeoAlt} from 'react-bootstrap-icons';\n\nconst Character = (props) => {\n    return (\n        <div className=\"card\">\n            <img src={props.image} className=\"card-img-top\" alt={props.name} />\n                <div className=\"card-body p-2\">\n                    <h5 className=\"card-title text-center pt-3\">{props.name}</h5>\n                </div>\n            <div className=\"p-0\">\n                <ul className=\"list-group list-group-flush\">\n                        <li className=\"list-group-item pl-1\"></li>\n                        <li className=\"list-group-item pl-1\">\n                            Status\n                            {\n                                props.status === 'Alive' ? <ExclamationCircle color=\"blue\" className=\"pl-1\" size={15} /> :\n                                    <ExclamationCircle className=\"pl-1\" color=\"red\" size={15}/>\n                            }\n                        </li>\n                        <li className=\"list-group-item pl-1\">\n                            {props.location.name}\n                            <GeoAlt color=\"green\" size={15} className=\"pl-1\" />\n                        </li>\n                    </ul>\n            </div>\n        </div>\n    )\n}\nexport default Character;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Character from \"./Character\";\n\n\nclass Characters extends Component {\n\n    state = {\n        info: {},\n        characters: [],\n        pageNumbers: [],\n        currentPage: 0\n    }\n\n    numbers = (num) => {\n        const numsArray = []\n        for (let i = 0; i < num; i++) {\n            numsArray.push(i)\n        }\n        numsArray.shift()\n        return numsArray\n    }\n\n    componentDidMount() {\n        axios.get(`https://rickandmortyapi.com/api/character/`)\n            .then(\n                (response) => {\n                    this.setState({\n                        characters: response.data.results,\n                        info: response.data.info,\n                        pageNumbers: this.numbers(response.data.info.pages)\n                    })\n                }\n            )\n\n\n    }\n\n    handleClick = (page) => {\n        this.setState({\n            currentPage: page\n        })\n        axios.get(`https://rickandmortyapi.com/api/character/?page=${page}`)\n            .then(\n                (response) => {\n                    this.setState({\n                        characters: response.data.results\n                    })\n                }\n            )\n    }\n\n    render() {\n        const {characters, pageNumbers, currentPage} = this.state\n        console.log(this.state)\n        return (\n            <div className=\"container\">\n                <div className=\"row mx-auto mt-5\">\n                    {\n                        characters ? characters.map(character =>\n                            <Character\n                                key={character.id}\n                                name={character.name}\n                                status={character.status}\n                                species={character.species}\n                                gender={character.gender}\n                                origin={character.origin}\n                                location={character.location}\n                                image={character.image}\n                            />) : null\n                    }\n                </div>\n                <nav aria-label=\"Page navigation example\" className=\"mt-5 w-50\">\n                    <ul className=\"pagination\">\n                        {\n                            pageNumbers.map((page) => <li\n                                className={`page-item ${currentPage === page ? 'active' : null}`} key={page}\n                                onClick={() => this.handleClick(page)}><span\n                                className=\"page-link\">{page}</span></li>\n                            )\n                        }\n                    </ul>\n                </nav>\n            </div>\n\n        )\n    }\n}\n\nexport default Characters;","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <nav className=\"navbar navbar-dark bg-dark mt-5\">\n          <span className=\"navbar-text mx-auto\">\n            MIT License\n          </span>\n        </nav>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport Navbar from \"./components/navbar\";\nimport Characters from \"./components/Characters\";\nimport Footer from \"./components/footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Characters />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './themes/main.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}